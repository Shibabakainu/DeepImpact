-- Create the database
SET NAMES utf8;
DROP DATABASE IF EXISTS storyteller;
CREATE DATABASE storyteller CHARACTER SET utf8 COLLATE utf8_general_ci;

USE storyteller;

-- Create the users table
DROP TABLE IF EXISTS users;
CREATE TABLE users (
    id              INT             AUTO_INCREMENT PRIMARY KEY,
    email           VARCHAR(100)    NOT NULL UNIQUE,
    password        VARCHAR(255)    NOT NULL,
    profile_image   VARCHAR(255),
    name            VARCHAR(100)    NOT NULL UNIQUE,
    created_at      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP
);

-- storyテーブルを作成
DROP TABLE IF EXISTS story;
CREATE TABLE story (
    story_text  TEXT            NOT NULL,
    keywords    VARCHAR(255)    NOT NULL,
    turn_number INT             NOT NULL
);

INSERT INTO story (story_text, keywords, turn_number) 
VALUES (
    '　昔々、平和な国があり、その国は緑豊かな土地と、穏やかな人々に恵まれていました。しかし魔王が現れ軍勢を率いて国を支配しまし。魔王は強力な魔法が使え、心臓が３つあり、国は恐怖に包まれました。人々は魔王に立ち向かう勇者が現れるのを待ち望んでいました。そんな時、小さな町に住むが立ち上がりました。',
    '正義感の強い若い戦士',
    1
);


-- roomsテーブルを作成
DROP TABLE IF EXISTS rooms;
CREATE TABLE rooms (
    room_id         INT             AUTO_INCREMENT PRIMARY KEY,
    room_name       VARCHAR(100)    NOT NULL,
    host_id         INT             NOT NULL,
    created_at      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    max_players     INT             DEFAULT 6,
    status ENUM('waiting', 'in_game', 'finished') DEFAULT 'waiting',
    current_players INT             DEFAULT 1,
    FOREIGN KEY (host_id) REFERENCES users(id) ON DELETE CASCADE
);

-- room_passwordsテーブルを作成
DROP TABLE IF EXISTS room_passwords;
CREATE TABLE room_passwords (
    room_id         INT             PRIMARY KEY,
    password_hash   VARCHAR(255)    NOT NULL,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id) ON DELETE CASCADE
);

-- room_playersテーブルを作成
DROP TABLE IF EXISTS room_players;
CREATE TABLE room_players (
    id              INT             AUTO_INCREMENT PRIMARY KEY,
    room_id         INT             NOT NULL,
    user_id         INT             NOT NULL,
    player_position INT             NOT NULL,
    joined_at       TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    host            BOOLEAN         NOT NULL,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Create the friends table
DROP TABLE IF EXISTS friends;
CREATE TABLE friends (
    id              INT             AUTO_INCREMENT PRIMARY KEY,
    user_name       VARCHAR(100)    NOT NULL,
    friend_name     VARCHAR(100)    NOT NULL,
    status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
    requested_at    TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_name) REFERENCES users(name) ON DELETE CASCADE,
    FOREIGN KEY (friend_name) REFERENCES users(name) ON DELETE CASCADE,
    UNIQUE(user_name, friend_name)
);

-- Drop the existing Card table if exists
DROP TABLE IF EXISTS Card;
CREATE TABLE Card (
    Card_id INT PRIMARY KEY AUTO_INCREMENT,
    Card_name VARCHAR(100) NOT NULL,
    Image_path VARCHAR(255) NOT NULL
);

-- Insert demo cards (same as your original)
INSERT INTO Card (Card_id, Card_name, Image_path)
VALUES
(1, 'One', 'card1.jpg'),
(2, 'Two', 'card2.jpg'),
(3, 'Three', 'card3.jpg'),
(4, 'Four', 'card4.jpg'),
(5, 'Five', 'card5.jpg'),
(6, 'Six', 'card6.jpg'),
(7, 'Seven', 'card7.jpg'),
(8, 'Eight', 'card8.jpg'),
(9, 'Nine', 'card9.jpg'),
(10, 'Ten', 'card10.jpg'),
(11, 'Eleven', 'card11.jpg'),
(12, 'Twelve', 'card12.jpg'),
(13, 'Thirteen', 'card13.jpg'),
(14, 'Forteen', 'card14.jpg'),
(15, 'Fifteen', 'card15.jpg'),
(16, 'Sixteen', 'card16.jpg'),
(17, 'Seventeen', 'card17.jpg'),
(18, 'Eighteen', 'card18.jpg'),
(19, 'Nineteen', 'card19.jpg'),
(20, 'Twenty', 'card20.jpg'),
(21, 'TwentyOne', 'card21.jpg'),
(22, 'TwentyTwo', 'card22.jpg'),
(23, 'TwentyThree', 'card23.jpg'),
(24, 'TwentyFour', 'card24.jpg'),
(25, 'TwentyFive', 'card25.jpg'),
(26, 'TwentySix', 'card26.jpg'),
(27, 'TwentySeven', 'card27.jpg'),
(28, 'TwentyEight', 'card28.jpg'),
(29, 'TwentyNine', 'card29.jpg'),
(30, 'Thirty', 'card30.jpg'),
(31, 'ThirtyOne', 'card31.jpg'),
(32, 'ThirtyTwo', 'card32.jpg'),
(33, 'ThirtyThree', 'card33.jpg'),
(34, 'ThirtyFour', 'card34.jpg'),
(35, 'ThirtyFive', 'card35.jpg'),
(36, 'ThirtySix', 'card36.jpg');

-- New table to manage cards within a room and their status
DROP TABLE IF EXISTS room_cards;
CREATE TABLE room_cards (
    room_card_id INT PRIMARY KEY AUTO_INCREMENT,
    room_id INT NOT NULL,
    card_id INT NOT NULL,
    status TINYINT NOT NULL DEFAULT 0,  -- 0: Default, 1-6: Player hands 
    selected TINYINT NOT NULL DEFAULT 0,  -- 0: Not selected, 1: Selected
    voted TINYINT NOT NULL DEFAULT 0,    -- 0: Not voted, 1: Voted
    FOREIGN KEY (room_id) REFERENCES rooms(room_id),
    FOREIGN KEY (card_id) REFERENCES Card(Card_id)
);

-- New table to manage votes
DROP TABLE IF EXISTS votes;
CREATE TABLE votes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    room_id INT NOT NULL,
    player_id INT NOT NULL,
    card_id INT NOT NULL,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id),
    FOREIGN KEY (player_id) REFERENCES users(id),
    FOREIGN KEY (card_id) REFERENCES room_cards(card_id)
);

-- Remove the trigger if it exists
DROP TRIGGER IF EXISTS after_accept_friend;

-- Create the event to update reciprocal friend relationships
DELIMITER //

CREATE EVENT update_reciprocal_friends
ON SCHEDULE EVERY 1 MINUTE
DO
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE current_user_name VARCHAR(100);
    DECLARE current_friend_name VARCHAR(100);
    DECLARE cur CURSOR FOR 
        SELECT user_name, friend_name FROM friends WHERE status = 'accepted';

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO current_user_name, current_friend_name;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Check if reciprocal relationship exists
        IF NOT EXISTS (SELECT 1 FROM friends WHERE user_name = current_friend_name AND friend_name = current_user_name) THEN
            -- Insert the reciprocal relationship
            INSERT INTO friends (user_name, friend_name, status) VALUES (current_friend_name, current_user_name, 'accepted');
        ELSE
            -- Update the reciprocal relationship if it exists
            UPDATE friends SET status = 'accepted' WHERE user_name = current_friend_name AND friend_name = current_user_name;
        END IF;
    END LOOP;
    CLOSE cur;
END //

DELIMITER ;

-- Grant privileges
GRANT ALL PRIVILEGES ON storyteller.* TO 'username'@'localhost' IDENTIFIED BY 'password';
FLUSH PRIVILEGES;