-- データベースの作成
SET NAMES utf8;
DROP DATABASE IF EXISTS storyteller;
CREATE DATABASE storyteller CHARACTER SET utf8 COLLATE utf8_general_ci;

USE storyteller;

-- users テーブルの作成
DROP TABLE IF EXISTS users;
CREATE TABLE users (
    id              INT             AUTO_INCREMENT PRIMARY KEY,
    email           VARCHAR(100)    NOT NULL UNIQUE,
    password        VARCHAR(255)    NOT NULL,
    profile_image   VARCHAR(255),
    name            VARCHAR(100)    NOT NULL UNIQUE,
    created_at      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP
);

-- story テーブルの作成

DROP TABLE IF EXISTS story;
CREATE TABLE story (
    story_text  TEXT            NOT NULL,
    keywords    VARCHAR(255)    NOT NULL,
    turn_number INT             NOT NULL
);

INSERT INTO story (story_text, keywords, turn_number) 
VALUES (
    '　昔々、平和な国があり、その国は緑豊かな土地と、穏やかな人々に恵まれていました。しかし魔王が現れ軍勢を率いて国を支配しまし。魔王は強力な魔法が使え、心臓が３つあり、国は恐怖に包まれました。人々は魔王に立ち向かう勇者が現れるのを待ち望んでいました。そんな時、小さな町に住むが立ち上がりました。',
    '正義感の強い若い戦士',
    1
);

-- rooms テーブルの作成
DROP TABLE IF EXISTS rooms;
CREATE TABLE rooms (
    room_id         INT             AUTO_INCREMENT PRIMARY KEY,
    room_name       VARCHAR(100)    NOT NULL,
    host_id         INT             NOT NULL,
    created_at      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    max_players     INT             DEFAULT 6,
    status ENUM('waiting', 'in_game', 'finished') DEFAULT 'waiting',
    current_players INT             DEFAULT 1,
    turn_number     INT             DEFAULT 1,
    FOREIGN KEY (host_id) REFERENCES users(id) ON DELETE CASCADE
);

-- room_passwords テーブルの作成
DROP TABLE IF EXISTS room_passwords;
CREATE TABLE room_passwords (
    room_id         INT             PRIMARY KEY,
    password_hash   VARCHAR(255)    NOT NULL,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id) ON DELETE CASCADE
);

-- room_players テーブルの作成
DROP TABLE IF EXISTS room_players;
CREATE TABLE room_players (
    id                  INT             AUTO_INCREMENT PRIMARY KEY,
    room_id             INT             NOT NULL,
    user_id             INT             NOT NULL,
    player_position     INT             NOT NULL,
    joined_at           TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    host                BOOLEAN         NOT NULL,
    score               INT             DEFAULT 0,
    last_scored_turn    INT             DEFAULT 0,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    UNIQUE (room_id, player_position)
);

-- friends テーブルの作成
DROP TABLE IF EXISTS friends;
CREATE TABLE friends (
    id              INT             AUTO_INCREMENT PRIMARY KEY,
    user_name       VARCHAR(100)    NOT NULL,
    friend_name     VARCHAR(100)    NOT NULL,
    status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
    requested_at    TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_name) REFERENCES users(name) ON DELETE CASCADE,
    FOREIGN KEY (friend_name) REFERENCES users(name) ON DELETE CASCADE,
    UNIQUE(user_name, friend_name)
);

-- messages テーブルの作成 (room_id を NULL 許可に変更)
DROP TABLE IF EXISTS messages;
CREATE TABLE messages (
    message_id      INT             AUTO_INCREMENT PRIMARY KEY,
    room_id         INT             NULL,                  -- NULL 許可に変更
    user_id         INT             NOT NULL,
    recipient_id    INT             NOT NULL,
    content         TEXT            NOT NULL,
    sent_at         TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (recipient_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Card テーブルの作成
DROP TABLE IF EXISTS Card;
CREATE TABLE Card (
    Card_id INT PRIMARY KEY AUTO_INCREMENT,
    Card_name VARCHAR(100) NOT NULL,
    Image_path VARCHAR(255) NOT NULL
);

-- デモ用のカードデータを挿入
INSERT INTO Card (Card_id, Card_name, Image_path)
VALUES
(37, 'Thirty-Seven', 'card37.jpg'),
(38, 'Thirty-Eight', 'card38.jpg'),
(39, 'Thirty-Nine', 'card39.jpg'),
(40, 'Forty', 'card40.jpg'),
(41, 'Forty-One', 'card41.jpg'),
(42, 'Forty-Two', 'card42.jpg'),
(43, 'Forty-Three', 'card43.jpg'),
(44, 'Forty-Four', 'card44.jpg'),
(45, 'Forty-Five', 'card45.jpg'),
(46, 'Forty-Six', 'card46.jpg'),
(47, 'Forty-Seven', 'card47.jpg'),
(48, 'Forty-Eight', 'card48.jpg'),
(49, 'Forty-Nine', 'card49.jpg'),
(50, 'Fifty', 'card50.jpg'),
(51, 'Fifty-One', 'card51.jpg'),
(52, 'Fifty-Two', 'card52.jpg'),
(53, 'Fifty-Three', 'card53.jpg'),
(54, 'Fifty-Four', 'card54.jpg'),
(55, 'Fifty-Five', 'card55.jpg'),
(56, 'Fifty-Six', 'card56.jpg'),
(57, 'Fifty-Seven', 'card57.jpg'),
(58, 'Fifty-Eight', 'card58.jpg'),
(59, 'Fifty-Nine', 'card59.jpg'),
(60, 'Sixty', 'card60.jpg'),
(61, 'Sixty-One', 'card61.jpg'),
(62, 'Sixty-Two', 'card62.jpg'),
(63, 'Sixty-Three', 'card63.jpg'),
(64, 'Sixty-Four', 'card64.jpg'),
(65, 'Sixty-Five', 'card65.jpg'),
(66, 'Sixty-Six', 'card66.jpg'),
(67, 'Sixty-Seven', 'card67.jpg'),
(68, 'Sixty-Eight', 'card68.jpg'),
(69, 'Sixty-Nine', 'card69.jpg'),
(70, 'Seventy', 'card70.jpg'),
(71, 'Seventy-One', 'card71.jpg'),
(72, 'Seventy-Two', 'card72.jpg'),
(73, 'Seventy-Three', 'card73.jpg'),
(74, 'Seventy-Four', 'card74.jpg'),
(75, 'Seventy-Five', 'card75.jpg'),
(76, 'Seventy-Six', 'card76.jpg'),
(77, 'Seventy-Seven', 'card77.jpg'),
(78, 'Seventy-Eight', 'card78.jpg'),
(79, 'Seventy-Nine', 'card79.jpg'),
(80, 'Eighty', 'card80.jpg');


-- room_cards テーブルの作成
DROP TABLE IF EXISTS room_cards;
CREATE TABLE room_cards (
    room_card_id INT PRIMARY KEY AUTO_INCREMENT,
    room_id INT NOT NULL,
    card_id INT NOT NULL,
    player_position INT NOT NULL,
    selected TINYINT NOT NULL DEFAULT 0,
    voted TINYINT NOT NULL DEFAULT 0,
    hide TINYINT NOT NULL DEFAULT 0,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id),
    FOREIGN KEY (card_id) REFERENCES Card(Card_id),
    FOREIGN KEY (room_id, player_position) REFERENCES room_players(room_id, player_position)
);

-- ExtraCard テーブルの作成
DROP TABLE IF EXISTS ExtraCard;
CREATE TABLE ExtraCard (
    ExtraCard_id INT PRIMARY KEY AUTO_INCREMENT,
    Card_name VARCHAR(100) NOT NULL,
    Image_path VARCHAR(255) NOT NULL,
    Card_description TEXT
);

-- votes テーブルの作成
DROP TABLE IF EXISTS votes;
CREATE TABLE votes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    room_id INT NOT NULL,
    player_id INT NOT NULL,
    room_card_id INT NOT NULL,
    turn INT NOT NULL,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id),
    FOREIGN KEY (player_id) REFERENCES users(id),
    FOREIGN KEY (room_card_id) REFERENCES room_cards(room_card_id)
);

-- 既存のトリガーがあれば削除
DROP TRIGGER IF EXISTS after_accept_friend;

-- 相互フレンドシップを更新するイベントの作成
DELIMITER //

CREATE EVENT update_reciprocal_friends
ON SCHEDULE EVERY 1 MINUTE
DO
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE current_user_name VARCHAR(100);
    DECLARE current_friend_name VARCHAR(100);
    DECLARE cur CURSOR FOR 
        SELECT user_name, friend_name FROM friends WHERE status = 'accepted';

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO current_user_name, current_friend_name;
        IF done THEN
            LEAVE read_loop;
        END IF;

        IF NOT EXISTS (SELECT 1 FROM friends WHERE user_name = current_friend_name AND friend_name = current_user_name) THEN
            INSERT INTO friends (user_name, friend_name, status) VALUES (current_friend_name, current_user_name, 'accepted');
        ELSE
            UPDATE friends SET status = 'accepted' WHERE user_name = current_friend_name AND friend_name = current_user_name;
        END IF;
    END LOOP;
    CLOSE cur;
END //

DELIMITER ;

-- 権限の付与
GRANT ALL PRIVILEGES ON storyteller.* TO 'username'@'localhost' IDENTIFIED BY 'password';
FLUSH PRIVILEGES;
