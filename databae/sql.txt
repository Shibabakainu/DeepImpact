-- Create the database
SET NAMES utf8;
DROP DATABASE IF EXISTS storyteller;
CREATE DATABASE storyteller CHARACTER SET utf8 COLLATE utf8_general_ci;

USE storyteller;

-- Create the users table
DROP TABLE IF EXISTS users;
CREATE TABLE users (
    id              INT             AUTO_INCREMENT PRIMARY KEY,
    email           VARCHAR(100)    NOT NULL UNIQUE,
    password        VARCHAR(255)    NOT NULL,
    profile_image   VARCHAR(255),
    name            VARCHAR(100)    NOT NULL UNIQUE,
    created_at      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP
);

-- Insert a demo user
INSERT INTO users (id, email, password, profile_image, name, created_at) VALUES 
(1, 'demo@demo', 'demo', '', 'demo', NOW());

-- Create the rooms table
DROP TABLE IF EXISTS rooms;
CREATE TABLE rooms (
    room_id         INT             AUTO_INCREMENT PRIMARY KEY,
    room_name       VARCHAR(100)    NOT NULL,
    host_user_name  VARCHAR(100)    NOT NULL,
    created_at      TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    max_players     INT             DEFAULT 6,
    status ENUM('waiting', 'in_game', 'finished') DEFAULT 'waiting',
    current_players INT             DEFAULT 1,  -- 新しいカラムの追加
    FOREIGN KEY (host_user_name) REFERENCES users(name) ON DELETE CASCADE
);

-- Create the room_passwords table
DROP TABLE IF EXISTS room_passwords;
CREATE TABLE room_passwords (
    room_id         INT             PRIMARY KEY,
    password_hash   VARCHAR(255)    NOT NULL,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id) ON DELETE CASCADE
);

-- Create the room_players table
DROP TABLE IF EXISTS room_players;
CREATE TABLE room_players (
    id              INT             AUTO_INCREMENT PRIMARY KEY,
    room_id         INT             NOT NULL,
    user_id         INT             NOT NULL,
    joined_at       TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Create the friends table
DROP TABLE IF EXISTS friends;
CREATE TABLE friends (
    id              INT             AUTO_INCREMENT PRIMARY KEY,
    user_name       VARCHAR(100)    NOT NULL,
    friend_name     VARCHAR(100)    NOT NULL,
    status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
    requested_at    TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_name) REFERENCES users(name) ON DELETE CASCADE,
    FOREIGN KEY (friend_name) REFERENCES users(name) ON DELETE CASCADE,
    UNIQUE(user_name, friend_name)
);

# カードテーブル作成
DROP TABLE IF EXISTS Card;
CREATE TABLE Card (
    Card_id INT PRIMARY KEY,
    Card_name VARCHAR(100) NOT NULL,
    Image_path VARCHAR(255) NOT NULL
);

INSERT INTO Card (Card_id, Card_name, Image_path)
VALUES
(1, 'Card One', 'card1.jpg'),
(2, 'Card Two', 'card2.jpg'),
(3, 'Card Three', 'card3.jpg'),
(4, 'Card Four', 'card4.jpg'),
(5, 'Card Five', 'card5.jpg'),
(6, 'Card Six', 'card6.jpg'),
(7, 'Card Seven', 'card7.jpg'),
(8, 'Card Eight', 'card8.jpg'),
(9, 'Card Nine', 'card9.jpg'),
(10, 'Card Ten', 'card10.jpg');


-- Remove the trigger if it exists
DROP TRIGGER IF EXISTS after_accept_friend;

-- Create the event to update reciprocal friend relationships
DELIMITER //

CREATE EVENT update_reciprocal_friends
ON SCHEDULE EVERY 1 MINUTE
DO
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE current_user_name VARCHAR(100);
    DECLARE current_friend_name VARCHAR(100);
    DECLARE cur CURSOR FOR 
        SELECT user_name, friend_name FROM friends WHERE status = 'accepted';

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO current_user_name, current_friend_name;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Check if reciprocal relationship exists
        IF NOT EXISTS (SELECT 1 FROM friends WHERE user_name = current_friend_name AND friend_name = current_user_name) THEN
            -- Insert the reciprocal relationship
            INSERT INTO friends (user_name, friend_name, status) VALUES (current_friend_name, current_user_name, 'accepted');
        ELSE
            -- Update the reciprocal relationship if it exists
            UPDATE friends SET status = 'accepted' WHERE user_name = current_friend_name AND friend_name = current_user_name;
        END IF;
    END LOOP;
    CLOSE cur;
END //

DELIMITER ;

-- Grant privileges
GRANT ALL PRIVILEGES ON storyteller.* TO 'username'@'localhost' IDENTIFIED BY 'password';
FLUSH PRIVILEGES;